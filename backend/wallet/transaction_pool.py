from backend.wallet.transaction import Transaction


class TransactionPool:
    def __init__(self):
        # empty dictionary of key value pairs
        self.transaction_map = {}
    
    # Set a transaction in the transaction pool
    def set_transaction(self, transaction):
        self.transaction_map[transaction.id] = transaction

    # Find a transaction generated by the address
    def existing_transaction(self, address):
        for transaction in self.transaction_map.values():
            if transaction.input['address'] == address:
                return transaction

    # Return the transactions of the transaction pool represented in a json serialized form
    def transaction_data(self):
        return list(map(
            lambda transaction: transaction.to_json(),
            self.transaction_map.values()
        ))

    # Delete blockchain recorded transactions from the transaction pool
    def clear_blockchain_transactions(self, blockchain):
        for block in blockchain.chain:
            for transaction in block.data:
                try: 
                    del self.transaction_map[transaction['id']]
                except KeyError:
                    pass
